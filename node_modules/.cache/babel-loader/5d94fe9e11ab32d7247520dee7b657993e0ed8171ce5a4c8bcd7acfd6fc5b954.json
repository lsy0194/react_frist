{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dltmd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uD3EC\\uD1A0\\uD3F4\\uB9AC\\uC624\\\\\\uC5D0\\uC774\\uBE14\\uB7F0\\\\web0925\\\\react_tmp\\\\src\\\\App.jsx\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Popup from './components/Popup';\nimport List from './components/List';\nimport './style.scss';\n\n//원시형자료는 : 메모리 값자체가 callstack에서 생성된 다음에 저장\n//원시형자료는 변수값을 다른 변수에 복사했을때 값 자체가 복사되는 deep copy;\n//복사된 값을 변경해도 원본은 그대로 유지되는 불변성 유지(immutable);\n\n//참조형 자료는 : 메모리(callstack),배열,객체등의 값자체는 (heap memory) 생성돔\n//callstack에 있는 메모리에는 배열의 값 자체가 아닌  heap memory에 있는 값에 위치값이 담김\n//참조링크가 담겨있는 변수를 새로운 변수에 옮겨담으면 값이 복사는것이 참조 링크만 복사됨\n//결국 같은값을 가리키고 있는 두개의링크만 복사가 됨\n//복사가 된 링크의 값을 바꾸면 결국원본값이 회손됨(shallow copy) 불변성 유지 안됨\n\n//리엑트 개발시 불션성이 중요한이유\n//리엑트는 원본이 있어야 복사본을 통해서 차이점을 비교분석\n//리엑트에서 배열이나 객체같은 참조형 자료는 무조건 deep copy를 해서 데이터를 변경해야함\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let isPop = true;\n  let isFooter = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), isFooter && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this), isPop ? /*#__PURE__*/_jsxDEV(Popup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App;\n\n/*\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Footer","Popup","List","jsxDEV","_jsxDEV","Fragment","_Fragment","App","isPop","isFooter","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dltmd/OneDrive/바탕 화면/포토폴리오/에이블런/web0925/react_tmp/src/App.jsx"],"sourcesContent":["import Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Popup from './components/Popup';\r\nimport List from './components/List';\r\nimport './style.scss';\r\n\r\n//원시형자료는 : 메모리 값자체가 callstack에서 생성된 다음에 저장\r\n//원시형자료는 변수값을 다른 변수에 복사했을때 값 자체가 복사되는 deep copy;\r\n//복사된 값을 변경해도 원본은 그대로 유지되는 불변성 유지(immutable);\r\n\r\n//참조형 자료는 : 메모리(callstack),배열,객체등의 값자체는 (heap memory) 생성돔\r\n//callstack에 있는 메모리에는 배열의 값 자체가 아닌  heap memory에 있는 값에 위치값이 담김\r\n//참조링크가 담겨있는 변수를 새로운 변수에 옮겨담으면 값이 복사는것이 참조 링크만 복사됨\r\n//결국 같은값을 가리키고 있는 두개의링크만 복사가 됨\r\n//복사가 된 링크의 값을 바꾸면 결국원본값이 회손됨(shallow copy) 불변성 유지 안됨\r\n\r\n//리엑트 개발시 불션성이 중요한이유\r\n//리엑트는 원본이 있어야 복사본을 통해서 차이점을 비교분석\r\n//리엑트에서 배열이나 객체같은 참조형 자료는 무조건 deep copy를 해서 데이터를 변경해야함\r\n\r\nfunction App() {\r\n\tlet isPop = true;\r\n\tlet isFooter = true;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header />\r\n\t\t\t{isFooter && <Footer />}\r\n\t\t\t{isPop ? <Popup /> : null}\r\n\t\t\t<List />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n\r\n*/\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAO,cAAc;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACd,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,QAAQ,GAAG,IAAI;EACnB,oBACCL,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACCN,OAAA,CAACL,MAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACTL,QAAQ,iBAAIL,OAAA,CAACJ,MAAM;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtBN,KAAK,gBAAGJ,OAAA,CAACH,KAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAG,IAAI,eACzBV,OAAA,CAACF,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACP,CAAC;AAEL;AAACC,EAAA,GAXQR,GAAG;AAaZ,eAAeA,GAAG;;AAElB;AACA;AACA;AAFA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}