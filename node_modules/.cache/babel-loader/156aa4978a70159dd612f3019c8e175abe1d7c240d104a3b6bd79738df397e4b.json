{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dltmd\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uD3EC\\uD1A0\\uD3F4\\uB9AC\\uC624\\\\\\uC5D0\\uC774\\uBE14\\uB7F0\\\\web0925\\\\react_tmp\\\\src\\\\App.jsx\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Popup from './components/Popup';\nimport List from './components/List';\nimport './style.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let arr = ['reading', 'game', 'cook'];\n  let newArr = arr;\n  newArr[0] - 'execrice';\n  console.log(newArr);\n  let isPop = true;\n  let isFooter = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, this), isFooter && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this), isPop ? /*#__PURE__*/_jsxDEV(Popup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App;\n\n/*\r\n\tSSR vs CSR\r\n\r\n\tSSR - Server Side Rendering\r\n\t- 페이지 이동시마다 일일이 서버쪽에 HTML파일을 요청해서 가져오는 방식\r\n\t- 장점 : 초기로딩속도가 빠름, 검색엔진 최적화 (SEO 좋음)\r\n\t- 단점 : 페이지 이동시마다 일일이 서버쪽에 파일을 요청해야 되므로 페이지 깜박거림\r\n\r\n\tCSR - Client Side Rendering\r\n\t- 초기에 빈 HTML파일을 서버쪽에서 가져오고 화면에 출력될 모든 데이터를 자바스립트로 Chunk단위의 모든 데이터 파일 가져온후 빈 HTML파일에 동적으로 출력\r\n\t- 장점 : 한번에 서브페이지포함한 모든 데이터를 불러오기 때문에 페이지 이동시마다 새롭게 파일을 요청할 필요가 없기 때문에 페이지 전환이 자연스러움\r\n\t- 단점 : 모든 페이지에 대한 데이터를 한번에 다 가져오기 때문에 초기로딩속도가 SSR방식에 비해서는 늦음, 검색엔진 최적화가 안됨\r\n\r\n\tReal DOM (실제돔)\r\n\t- HTML태그를 이용해서 구조를 만들면 브라우저가 이를 해석해서 실제 DOM형태로 객체를 만들고 화면에 렌더링\r\n\r\n\tVirtual DOM (가상돔)\r\n\t- 브라우저에 의해 Real DOM으로 변경되기 전 자바스크립트에 의해서 메모리상으로 가상의 DOM을 만들어서 기존의 DOM구조와 차이점을 분석하고 바뀐 부분을 다시 렌더링하는 형태\r\n\r\n\tJSX\r\n\t- 리액트에 DOM을 효율적으로 생성하기 위한 HTML의 규칙성을 따라한 자바스크립트 돔 제작 방식\r\n\r\n\t컴포넌트 생성시 주의점\r\n\t- 무조건 JSX를 리턴\r\n\t- 함수 이름은 대문자로 시작\r\n\t- export 로 내보야지 다른 컴포넌트에서 불러올수 있음\r\n\t- 하나의 컴포넌트 함수는 단인 JSX를 리턴 가능\r\n\t- 복수개의 JSX를 리턴하고 싶을때는 wrapping El로 묶어서 그룹화한뒤 리턴\r\n\t- 중첩된 Element노드를 생성하지 않고 복수개의 JSX를 리턴하고 싶을때는 <></> Fragment로 감싸줌\r\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Footer","Popup","List","jsxDEV","_jsxDEV","Fragment","_Fragment","App","arr","newArr","console","log","isPop","isFooter","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dltmd/OneDrive/바탕 화면/포토폴리오/에이블런/web0925/react_tmp/src/App.jsx"],"sourcesContent":["import Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Popup from './components/Popup';\r\nimport List from './components/List';\r\nimport './style.scss';\r\n\r\nfunction App() {\r\n\tlet arr = ['reading', 'game', 'cook'];\r\n\tlet newArr = arr;\r\n\tnewArr[0] - 'execrice';\r\n\tconsole.log(newArr);\r\n\r\n\tlet isPop = true;\r\n\tlet isFooter = true;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header />\r\n\t\t\t{isFooter && <Footer />}\r\n\t\t\t{isPop ? <Popup /> : null}\r\n\t\t\t<List />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n\tSSR vs CSR\r\n\r\n\tSSR - Server Side Rendering\r\n\t- 페이지 이동시마다 일일이 서버쪽에 HTML파일을 요청해서 가져오는 방식\r\n\t- 장점 : 초기로딩속도가 빠름, 검색엔진 최적화 (SEO 좋음)\r\n\t- 단점 : 페이지 이동시마다 일일이 서버쪽에 파일을 요청해야 되므로 페이지 깜박거림\r\n\r\n\tCSR - Client Side Rendering\r\n\t- 초기에 빈 HTML파일을 서버쪽에서 가져오고 화면에 출력될 모든 데이터를 자바스립트로 Chunk단위의 모든 데이터 파일 가져온후 빈 HTML파일에 동적으로 출력\r\n\t- 장점 : 한번에 서브페이지포함한 모든 데이터를 불러오기 때문에 페이지 이동시마다 새롭게 파일을 요청할 필요가 없기 때문에 페이지 전환이 자연스러움\r\n\t- 단점 : 모든 페이지에 대한 데이터를 한번에 다 가져오기 때문에 초기로딩속도가 SSR방식에 비해서는 늦음, 검색엔진 최적화가 안됨\r\n\r\n\tReal DOM (실제돔)\r\n\t- HTML태그를 이용해서 구조를 만들면 브라우저가 이를 해석해서 실제 DOM형태로 객체를 만들고 화면에 렌더링\r\n\r\n\tVirtual DOM (가상돔)\r\n\t- 브라우저에 의해 Real DOM으로 변경되기 전 자바스크립트에 의해서 메모리상으로 가상의 DOM을 만들어서 기존의 DOM구조와 차이점을 분석하고 바뀐 부분을 다시 렌더링하는 형태\r\n\r\n\tJSX\r\n\t- 리액트에 DOM을 효율적으로 생성하기 위한 HTML의 규칙성을 따라한 자바스크립트 돔 제작 방식\r\n\r\n\t컴포넌트 생성시 주의점\r\n\t- 무조건 JSX를 리턴\r\n\t- 함수 이름은 대문자로 시작\r\n\t- export 로 내보야지 다른 컴포넌트에서 불러올수 있음\r\n\t- 하나의 컴포넌트 함수는 단인 JSX를 리턴 가능\r\n\t- 복수개의 JSX를 리턴하고 싶을때는 wrapping El로 묶어서 그룹화한뒤 리턴\r\n\t- 중첩된 Element노드를 생성하지 않고 복수개의 JSX를 리턴하고 싶을때는 <></> Fragment로 감싸줌\r\n*/\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtB,SAASC,GAAGA,CAAA,EAAG;EACd,IAAIC,GAAG,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;EACrC,IAAIC,MAAM,GAAGD,GAAG;EAChBC,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU;EACtBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EAEnB,IAAIG,KAAK,GAAG,IAAI;EAChB,IAAIC,QAAQ,GAAG,IAAI;EACnB,oBACCT,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACCV,OAAA,CAACL,MAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACTL,QAAQ,iBAAIT,OAAA,CAACJ,MAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtBN,KAAK,gBAAGR,OAAA,CAACH,KAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAG,IAAI,eACzBd,OAAA,CAACF,IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACP,CAAC;AAEL;AAACC,EAAA,GAhBQZ,GAAG;AAkBZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}